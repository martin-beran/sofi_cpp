/*! \mainpage SOFI C++

\tableofcontents

\section SOFI_principles The main principles of the SOFI security model

SOFI is an abbreviation for <em>Subjects and Objects with Floating
Integrity</em>. The name is derived from the main idea of restricting
allowed interactions of entities, called \e subjects and \e objects,
according to their \e integrity, which comprises security-relevant
properties of the entities. The integrity of an entity is not fixed. It
changes dynamically, depending on interactions with other entities.

\section SOFI_system SOFI system and engine

A <em>SOFI system</em> consists of the SOFI engine, entities, and the database
containing integrities of all entities and rules needed for making security
decisions, for example, ACLs (Access Control Lists). The <em>SOFI engine</em>
controls all operations performed by entities of the SOFI system and enforces
its rules. The engine has full rights and is not restricted by the SOFI rules.

The complete SOFI system implementation is contained in namespace \ref soficpp.
The main include file is soficpp.hpp. File engine.hpp contains declarations
related to the engine, especially class soficpp::engine.

\section SOFI_entities_ops Entities and operations

<ul>
<li>\e Entity -- a part of a system that participates in an operation.
According to its role in an operation, an entity can be one of:
    <ul>
    <li>\e Subject -- the active entity in an operation. It is the initiator of
    the operation, for example, a process in a operating system invoking
    a system call.
    <li>\e Object -- the passive entity in an operation. It is the target of
    the operation, for example, a file being read or written by a process
    (which is the subject of the read/write operation).
    </ul>
According to the information flow during an operation, an entity can be:
    <ul>
    <li>\e Writer, \e source -- if information flows from this entity during
    the operation.
    <li>\e Reader, \e destination -- if information flows to this entity during
    the operation.
    </ul>
<li>\e Operation -- any access or action performed by a subject on an object.
Rules of the SOFI model are evaluated before each operation and either permit,
or deny execution of the operation. According to the direction of the
information flow, an operation can be one of:
    <ul>
    <li><em>Read operation</em> -- information flows from the object (writer,
    source) to the subject (reader, destination), that is, the subject fetches
    information from the object. For example, reading from a file.
    <li><em>Write operation</em> -- information flows from the subject (writer,
    source) to the object (source, destination), that is, the subject changes
    the state of the object. For example, writing to a file.
    <li><em>Read-write operation</em> -- a combination of read and write.
    Information flows in both direction between the subject and the object,
    which are both sources and destinations. The subject changes the state of
    the object, and retrieves some information from it at the same time. For
    example, processing of a POST HTTP request sent from a client (the subject)
    to a server (the object). The request triggers some processing on the
    server and it also sends some data back to the client.
    <li><em>No-flow operation</em> -- There is no information flow, neither
    from the subject to the subject, nor in the opposite direction.
    </ul>
</ul>

File entity.hpp contains declarations related to entities. The main concepts
are soficpp::entity and soficpp::operation, implemented by classes
soficpp::basic_entity and soficpp::operation_base.

\section SOFI_integrity Integrity

Each entity in the SOFI model has an attached \e integrity. It can be viewed as
an abstract representation of a set of security-relevant features of the
entity. From the perspective of the SOFI engine, an interpretation of the
integrity value does not matter. Each implementation of the SOFI model can
choose a set of possible integrity values, their representation and
interpretation.

The only restriction is that the set of integrity values must be a <a
href="https://en.wikipedia.org/wiki/Lattice_(order)"><em>lattice</em></a>:

\arg It is a partially ordered set.
\arg Each two elements have a \e join (supremum, least upper bound).
\arg Each two elements have a \e meet (infimum, greatest lower bound).

In addition, we require a <em>bounded lattice</em>, which is a lattice with two
added conditions:

\arg There is a \e maximum (greatest element)
\arg There is a \e minimum (least element)

The set of integrity values can be either finite (e.g., an integrity is
a set of values taken from a fixed enumeration), or (potentially) infinite
(e.g., an integrity is a set of arbitrary numbers of strings). Note that every
non-empty finite lattice is bounded.

A concrete representation of a single integrity value can be a set of atomic
<em>integrity attributes</em>, represented, for example, by a bitmap or by
a list of names of attibutes. The set of all integrity values is then the power
set (the set of all subsets) of the set of integrity attributes. The operations
join and meet and the order relation are implemented by set union and
itersection, and by the subset relation, respectivelly.

File integrity.hpp contains declarations related to integrity values. There are
several classes implementing concept soficpp::integrity:
soficpp::integrity_single, soficpp::integrity_linear,
soficpp::integrity_bitset, soficpp::integrity_set, soficpp::integrity_shared.

\section SOFI_rules Rules for permitting operations

SOFI deals with allowing or denying and operations only. Actions done by an
operation, for example, reading or writing data, are executed only if the
operation is allowed by the SOFI engine, but the execution itself is out of
scope of SOFI.

SOFI rules check that a subject has enough rights, represented by its
integrity, to execute an operation on an object. If the operation is comprised
of passing some data from one (writer) entity to the other (reader), these data
can change the internal state of the reader. It can potentially influence the
trustworthiness, represented by the integrity, of the reader. The influence can
be both negative, e.g., damaging the state of the reader by incorrect or
malicious data, and positive, e.g., when granting additional privileges by the
writer to the reader. SOFI models the effects of a data flow by adjusting the
integrity of the reader according to its previous integrity and the writer
integrity.

Each entity holds several attributes needed to evaluate SOFI operations:
\arg <em>Current integrity</em> -- represents the current state of the entity
and controls its access rights when acting as a subject.
\arg <em>Minimum integrity</em> -- protects the entity from operations that
would reduce its integrity below a threshold. It may be either a threshold
integrity value, or a predicate acting on integrity values and deciding if an
integrity is sufficiently high.
\arg <em>Access controller</em> -- is used to test subject integrity when the
entity acts as the object of an operation. In general, it is a function that
gets the subject integrity and parameters of the operation and decides if the
operation is allowed. Although not strictly required, the access controller
should be monotonic, so that if it allows the operation for an integrity, it
should also allow it for all greater integrities (in the lattice ordering).
\arg <em>Integrity testing function</em> -- is used to adjust the integrity of
the entity acting as the reader in an operation. To preserve security
guarantees of the SOFI model, the result of the function must be less or equal
to the old integrity of the reader entity.
\arg <em>Integrity providing function</em> -- is used to grant an integrity
to the reader if the entity acts as the writer in an operation. To preserve
security guarantees of the SOFI model, the result of the function must be less
or equal to the integrity of the writer.
\arg <em>Integrity receiving function</em> -- is used to accept an integrity
granted by the writer when the entity acts as the reader in an operation. To
preserve security guarantees of the SOFI model, the result of the function must
be less or equal to its argument.

A simple example of an access controller is an <em>access control list
(ACL)</em>, implemented by classes soficpp::acl_single, soficpp::acl,
soficpp::ops_acl. It is a set of integrities. A tested integrity is allowed by
the ACL iff the ACL contains at least one element less or equal to the tested
integrity.

File entity.hpp contains declarations related to entity attributes: concepts
soficpp::access_controller and soficpp::integrity_function, implemented by
classes, e.g., soficpp::ops_acl, soficpp::dyn_integrity_fun,
soficpp::integrity_fun, soficpp::safe_integrity_fun.

The algorithms performed by the SOFI engine when an operation is to be
executed:
<ol>
<li>The access controller of the object is evaluated for the integrity of the
subject. If the access is denied, the operation terminates immediately.
<li>If the operation is read or write, the new integrity of the reader is
computed, but not yet assigned to the reader. For a read-write operation, the
computation of new integrities is done in both directions independently. The
new integrity of a reader is computed in several steps:
    <ol>
    <li>The new integrity is initialized to the lattice meet of the old reader
    integrity and the result of the reader integrity testing function applied
    to the writer integrity.
    <li>The writer integrity providing function is applied to the writer
    integrity.
    <li>The reader integrity receiving function is applied to the result of the
    previous step.
    <li>The lattice join is applied to the new integrity and the result of the
    previous step.
    </ol>
<li>The new integrity computed in the previous step is tested against the
minimum integrity of the reader, or independently for both readers during
a read-write operation. If at least one new integrity does not pass the test,
the operation terminates immediately.
<li>The new integrity becomes the current integrity of the reader (or both
readers in a read-write operation).
<li>The operation is executed.
</ol>

It is also possible to evaluate SOFI rules, returning whether the operation
would be allowed or denied, without actually executing the operation. The
algorithm of such test is the same, but the last two steps (setting new
integrities and executing the operation) are omitted.

File engine.hpp contains declarations related to evaluating SOFI rules and
executing operations. The main function that implents the SOFI operation
algorithm is soficpp::engine::operation().

\section SOFI_confidentiality Confidentiality

The SOFI model can be used also to maintain confidentiality of information, by
forbidding passing confidential information to readers without sufficient
clearance. The level of confidentiality is represented by integrity of the
writer, with greater integrity representing less confidential information. The
level of security clearance is represented by the minimum integrity of the
reader, with greater minimum integrity representing less clearance.

Passing highly confidential (less integrity) information to an entity with low
clearance (high minimum integrity) is blocked by the SOFI algorithm in the step
comparing the new reader integrity with the minimum integrity.

\section SOFI_distributed DiSOFI (Distributed SOFI)

It is possible to extend the SOFI model from a single SOFI system controlled by
a single SOFI engine to a communicating distributed set of SOFI systems and
engines. Each SOFI engine in such <em>distributed SOFI (DiSOFI)</em>
environment uses several objects and functions for communicating with all other
remote SOFI engines:

\arg \e Agent -- represents a remote SOFI engine and provides methods for
exporting local entities to the remote SOFI system and for importing remote
entities to the local SOFI system.
\arg \e Message -- is an external representation of an entity. It can be passed
to a remote SOFI system. The message contains the SOFI attributes of the
entity, any additional data of the entity (which represent the state of the
entity and are used by operations), and authentication data (for
example, a cryptographic signature) usable to verify that the content of the
message is authentic and unchanged since produced by the local SOFI engine.
\arg \e Export -- a method of an agent that converts a local entity to
a message that can be sent to the remote SOFI system represented by the agent.
\arg \e Import -- a method of an agent that converts a message received from
the remote SOFI system represented by the agent to a local entity.

File agent.hpp contains declarations related to the distributed SOFI model.
There are concepts soficpp::message, soficpp::agent. An example of a trivial
agent implementation is class soficpp::copy_agent.

\section Thread_safety Implementation thread safety

The default thread safety mode, unless specified otherwise for a particular part of the API, is

\threadsafe{safe, unsafe}

That is, any \c const member of any object may be accessed by any number of
threads simultaneously. When a non-\c const member of an object is being used
by a thread, no other (\c const or non-\c const) member of the same object may
be accessed at the same time by any other thread. Distinct objects of the same
or different types may be used by different threads simultaneously.

\section Examples Examples and experiments

Some examples how to use the library can be used in test programs in directory
\link ../test test/\endlink. There is also an experimental SOFI system in
program \c sofi_demo, implemented in file sofi_demo.cpp. It uses an SQLite
database to store a persistent state of the SOFI system, so any SQLite client
can be used to examine and modify the system by SQL commands. Examples of using
this program can be found in its tests, in file test_sofi_demo.cpp.

\section ACE

The SOFI security model can be viewed as a central part of a system security
architecture \e ACE (<em>Analyze-Control-Execute</em>). This architecture
splits every operation in three phases:
\arg \e Analyze -- Properties of the operation are analyzed and the results are
expressed using a common universal representation, not depending on the type of the
operation or its arguments. In SOFI, the common representation of operation
properties are integrities of entities involoved in the operation. An integrity
can be simply stored by the SOFI engine (for example, for files and processes),
generated by a content scanner (for example, malware detection in downloaded
files), or generated by analysis of communication (for example, a firewall
checking addresses or protocols in network traffic).
\arg \e Control -- The common representation of operation properties are
evaluated and an allow/deny decission is made. In SOFI, the control phase is
implemented by the SOFI algorithm, which makes a decision and also updates
integrities of entities.
\arg \e Execute -- If the operation was allowed by the control phase, it is
executed. Otherwise, error handling is performed, for example, a security
violation is reported. In SOFI, the operation is executed if allowed by the
SOFI algorithm.

The important property of the ACE architecture is that the Analyze and
Execution phases are specific for each type of operations and their arguments.
but the Control phase deals with abstract properties independent on the
concrete types involved in other phases.

If SOFI model is used in the control phase of ACE, the resulting system is
called \e ACES (<em>Analyze-Control-Execute with SOFI</em>).
*/
